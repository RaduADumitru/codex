{
  "collections":{
    "Lexeme":{
      "rule":{
        "title":"Lexeme",
        "description":"A Lexeme is essentially a word. Homonyms get separate lexemes each.",
        "type":"object",
        "properties":{
          "form":{
            "description":"Base form of the word, including an apostrophe (') for the accent. This makes it impractical for searches.",
            "type":"string"
          },
          "formNoAccent":{
            "description":"Base form of the word",
            "type":"string"
          },
          "hyphenations":{
            "description":"Comma-separated list of the lexeme's hyphenations. Can be empty",
            "type":"string"
          }
        }
      },
      "level":"strict",
      "message":"Lexeme could not be inserted!"
    },
    "Entry":{
      "rule":{
        "title":"Entry",
        "description":"An Entry is a unit of meaning. It is a container for one or more lexemes, definitions, and meaning trees.",
        "type":"object",
        "properties":{

        }
      },
      "level":"strict",
      "message":"Entry could not be inserted!"
    },
    "Tree":{
      "rule":{
        "title":"Tree",
        "description":"Trees are containers for meaning hierarchies (see the Meaning table for details).",
        "type":"object",
        "properties":{

        }
      },
      "level":"strict",
      "message":"Tree could not be inserted!"
    },
    "Meaning":{
      "rule":{
        "title":"Meaning",
        "description":"Meanings are hierarchical: there are main meanings which can have secondary meanings, tertiary meanings and so on. See veni (https://dexonline.ro/definitie/veni/sinteza) for an example.",
        "type":"object",
        "properties":{
          "parentId":{
            "description":"The ID of the parent meaning in the tree. 0 or NULL means that this meaning is a root.",
            "type":"integer"
          },
          "type":{
            "description":"0 - (proper) meaning, 1 - etymology, 2 - a usage example from literature, 3 - user-defined comment, 4 - diff from parent meaning, 5 - compound expression meaning",
            "type":"integer",
            "enum": [0, 1, 2, 3, 4, 5]
          },
          "treeId":{
            "description":"Tree to which the meaning belongs.",
            "type":"integer"
          },
          "internalRep":{
            "description":"The meaning text.",
            "type":"string"
          }
        }
      },
      "level":"strict",
      "message":"Meaning could not be inserted!"
    },
    "InflectedForm": {
      "rule": {
        "title": "InflectedForm",
        "description": "This table stores all the inflected forms for all the lexemes. All these forms are generated according to each lexeme's model type and number.",
        "properties": {
          "form": {
            "description": "The form, including an apostrophe (') for the accent",
            "type": "string"
          },
          "formNoAccent": {
            "description": "Obtained from form by removing the apostrophe. Same rationale as for Lexeme.formNoAccent",
            "type": "string"
          },
          "lexemeId": {
            "description": "Matches Lexeme.id",
            "type": "integer"
          },
          "inflectionId": {
            "description": "Matches Inflection.id",
            "type": "integer"
          },
          "recommended": {
            "description": "true if the form is still in use in current speech. This corresponds to ModelDescription.recommended, but is cached on every InflectedForm for speed.",
            "type": "integer"
          },
          "apheresis": {
            "description": "true if this form was generated through apheresis (has lost the initial letter).",
            "type": "boolean"
          },
          "apocope": {
            "description": "true if this form was generated through apocope (has lost the final letter).",
            "type": "boolean"
          }
        }
      },
      "level": "strict",
      "message": "Inflected form could not be inserted!"
    },
    "Inflection": {
      "rule": {
        "title": "Inflection",
        "description": "This is an unstructured list of all the possible inflected forms in Romanian, for example \"Substantiv neutru, Nominativ-Acuzativ, plural, nearticulat\".",
        "properties": {
          "description": {
            "description": "The full name of this inflection.",
            "type": "string"
          },
          "modelType": {
            "description": "To which model type (think \"part of speech\") this inflection belongs. For simplicity we only use each inflection once, although technically we could reuse for example \"masculine singular\" for masculine nouns, adjectives and pronouns.",
            "type": "string"
          }
        }
      },
      "level": "strict",
      "message": "Inflection could not be inserted!"
    },
    "Tag": {
      "rule": {
        "title": "Tag",
        "description": "Tags are little bits of information attached to objects, like regional, ironic or obscene.",
        "properties": {
          "parentId": {
            "description": "ID of the parent tag. Tags are hierarchical.",
            "type": "integer"
          },
          "value": {
            "description": "The text of the tag",
            "type": "string"
          }
        }
      },
      "level": "strict",
      "message": "Tag could not be inserted!"
    }
  },
  "edgeCollections":{
    "TreeEntry":{
      "schema":{
        "rule":{
          "properties": {
          }
        },
        "level":"strict",
        "message":"TreeEntry edge could not be inserted!"
      },
      "from":"Tree",
      "to":"Entry"
    },
    "EntryLexeme":{
      "schema":{
        "rule":{
          "properties": {
          }
        },
        "level":"strict",
        "message":"EntryLexeme edge could not be inserted!"
      },
      "from":"Entry",
      "to":"Lexeme"
    },
    "Relation":{
      "schema":{
        "rule":{
          "properties":{
            "type":{
              "description":"1 - synonyms, 2 - diminutives, 3 - diminutives, 4 - augmentatives",
              "type":"integer",
              "enum": [1, 2, 3, 4]
            }
          }
        },
        "level":"strict",
        "message":"Relation edge could not be inserted!"
      },
      "from":"Meaning",
      "to":"Tree"
    },
    "ObjectTag": {
      "schema": {
        "rule": {
          "properties": {
            "objectType": {
              "description": "Object with given tag: 1 - definition, 2 - lexeme, 3 - meaning, 4 - source, 5 - definitionVersion, 6 - entry, 7 - tree",
              "type": "integer",
              "enum": [
                1,
                2,
                3,
                4,
                5,
                6,
                7
              ]
            }
          }
        }
      }
    }
  },
  "generatedEdgeCollections":{
    "MeaningMeaning":{
      "attributeCollection":"Meaning",
      "from":{
        "collection":"Meaning",
        "attribute":"parentId"
      },
      "to":{
        "collection":"Meaning",
        "attribute":"_key"
      }
    },
    "MeaningTree":{
      "attributeCollection":"Meaning",
      "from":{
        "collection":"Meaning",
        "attribute":"_key"
      },
      "to":{
        "collection":"Tree",
        "attribute":"treeId"
      }
    },
    "LexemeInflectedForm": {
      "attributeCollection": "InflectedForm",
      "from": {
        "collection": "Lexeme",
        "attribute": "lexemeId"
      },
      "to": {
        "collection": "InflectedForm",
        "attribute": "_key"
      }
    },
    "InflectionInflectedForm": {
      "attributeCollection": "InflectedForm",
      "from": {
        "collection": "Inflection",
        "attribute": "inflectionId"
      },
      "to": {
        "collection": "InflectedForm",
        "attribute": "_key"
      }
    }
  }
}